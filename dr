#!/bin/bash

# ------------------------------------------------------------------
#
#  dr : docker runner
#  manage docker containers in a simple and consistent way.
#  
#  See:
#    https://github.com/j842/dr
#
# ------------------------------------------------------------------

DRUSER="druser"
DRGROUP="drgroup"
IMAGENAMETXT="imagename.txt"

readonly DRETCDIR="/etc/dr"

function retrieveDIRECTORY {
   if [ ! -d "$DRETCDIR" ]; then echo "Run configure before other commands.">&2 ; exit 1 ; fi
   DIRECTORY=$(<${DRETCDIR}/directory)
   if [ -z "$DIRECTORY" ]; then echo "Run configure before other commands.">&2 ; exit 1 ; fi
}

# retrieveCONTAINERNAME SERVICE
function retrieveCONTAINERNAME {
   local SERVICEDIR="$1"
   if [ ! -d ${SERVICEDIR} ]; then echo "Error - no such directory: ${SERVICEDIR}.">&2 ; exit 1 ; fi
   CONTAINERNAME=$(<"${SERVICEDIR}/txt/${IMAGENAMETXT}")
   if [ -z "$CONTAINERNAME" ]; then echo "Error - can't read ${IMAGENAMETXT}.">&2 ; exit 1 ; fi
}

function serviceline {
   printf "   %-15s - %-55s\n" "$1" "$2"
}

function showservices {
   # list available services. 
   # function install here should create imagename.txt
   # the container's drinstall script should create the shorthelp.txt file
   retrieveDIRECTORY
   echo "AVAILABLE SERVICES"
   find "$DIRECTORY" -maxdepth 1 -type d | while read SERVICE; do 
      if [ -e "$SERVICE/txt/shorthelp.txt" ]; then
         SHORTHELP=$(<"$SERVICE/txt/shorthelp.txt")
         serviceline "${SERVICE##*/}" "$SHORTHELP"
      else
         if [ -e "${SERVICE}/txt/${IMAGENAMETXT}" ]; then
            CONTAINERNAME=$(<"$SERVICE/txt/${IMAGENAMETXT}")
            serviceline "${SERVICE##*/}" "$CONTAINERNAME"
         fi
      fi
   done
}

function showusage {
cat <<'EOF' >&2

NAME
   dr - docker runner
   
SYNOPSIS
   dr configure DIRECTORY
   dr clean
   
   dr install CONTAINERNAME SERVICENAME
   dr destroy SERVICENAME
   
   dr SERVICENAME COMMAND ARGS

DESCRIPTION
   Provides a standard way to manage and run containers supporting dr.
   Intended to be used both manually and via Ansible.
   
EXIT CODE
   0   - success
   1   - error
   3   - no changes made
   
EOF
   showservices
   exit 1
}

#------------------------------------------------------------------------------------

# configure DIRECTORY
function configure {
   DIRECTORY="$1"
   if [ -z $DIRECTORY ]; then echo "dr configure requires directory argument.">&2 ; exit 1 ; fi
   mkdir -p "$DRETCDIR"   # ensure directrory exists.   
   echo "$DIRECTORY" > "${DRETCDIR}/directory"
   
   # set up standard docker user and group for containers.
   groupadd -g 22022 "$DRGROUP"
   adduser --disabled-password --gecos '' -u 22022 --gid 22022 "$DRUSER"

   mkdir -p "$DIRECTORY"   # ensure directrory exists.
   chown -R "${DRUSER}:${DRGROUP}" "$DIRECTORY"
}


# install CONTAINERNAME SERVICENAME
function install {
   CONTAINERNAME="$1"
   SERVICENAME="$2"
   local RVALI=0
   
   if [ -z $CONTAINERNAME ]; then echo "dr install requires CONTAINERNAME.">&2 ; exit 1 ; fi
   if [ -z $SERVICENAME ]; then echo "dr install requires SERVICENAME.">&2 ; exit 1 ; fi

   # Check mandatory files in container before touching host. Is it a dr container?
   local REQDCFILES=("drinstall" "drdestroy")
   for CFILE in "${REQDCFILES[@]}"; do
      docker run --rm -it ${CONTAINERNAME} /bin/bash -c "command -v /usr/local/bin/$CFILE >/dev/null 2>&1"
      if [ $? -ne 0 ]; then echo "Install failed - ${CONTAINERNAME} is not Docker Runner compatible. Required script ${CFILE} is missing.">&2 ; exit 1 ; fi
   done
      if [ $? -ne 0 ]; then echo "Install failed - ${CONTAINERNAME} is not Docker Runner compatible. Required script ${CFILE} is missing.">&2 ; exit 1 ; fi
   
   # Check running as druser.
   USERID=$(docker run --rm -it ${CONTAINERNAME} /bin/bash -c "id -u")
   if [ "$USERID" -ne "22022" ]; then echo "Install failed - ${CONTAINERNAME} is not Docker Runner compatible. Not running as druser (uid 22022).">&2 ; exit 1 ; fi
   
   DNAME="dr-install"
   retrieveDIRECTORY
   DIRSERVICE="${DIRECTORY}/${SERVICENAME}"

   mkdir -p "${DIRSERVICE}/txt"
   mkdir -p "${DIRSERVICE}/bin"
   echo "${CONTAINERNAME}" > "${DIRSERVICE}/txt/${IMAGENAMETXT}"
   echo "${SERVICENAME}" > "${DIRSERVICE}/txt/servicename.txt" 
   chown -R "${DRUSER}:${DRGROUP}" "${DIRSERVICE}"

   # assumes docker image does not use entrypoint. Could instead override entrypoint maybe.
   docker run --rm -i -t --name="$DNAME" -h "${HOSTNAME}" \
               -v ${DIRSERVICE}:/dr ${CONTAINERNAME} /usr/local/bin/drinstall ${SERVICENAME} ${CONTAINERNAME}
   if [ $? -ne 0 ]; then RVALI=1 ; echo "Failed to run drinstall.">&2 ; fi  
      
   # if the install process created an init script then run it, e.g. to create volume containers.
   # todo: tidy up return/exit codes!         
   if [ -e "${DIRSERVICE}/bin/hostinstall" ]; then
      bash "${DIRSERVICE}/bin/hostinstall" "${SERVICENAME}" "${CONTAINERNAME}"
   else
      RVALI=1
   fi
   
   # Check mandatory files on host.
   local REQDHOSTFILES=("txt/shorthelp.txt" "bin/hostinstall" "bin/hostdestroy" "bin/help")
   for HFILE in "${REQDHOSTFILES[@]}"; do
      if [ ! -e "${DIRSERVICE}/${HFILE}"; then echo "Install failed - ${HFILE} is required" ; RVALI=1 ; fi
   done
   
   if [ $RVALI -ne 0 ]; then
      destroy ${SERVICENAME}
   fi

   exit $RVALI
}

# destroy SERVICENAME
function destroy {
   SERVICENAME="$1"
     
   if [ -z $SERVICENAME ]; then echo "dr destroy requires SERVICENAME.">&2 ; exit 1 ; fi

   # Set DIRECTORY
   retrieveDIRECTORY   

   local RVALD=0
   local DNAME="dr-destroy"
   local DIRSERVICE="${DIRECTORY}/${SERVICENAME}"
   
   # we require the service directory to be present.
   if [ ! -d "$DIRSERVICE" ]; then echo "The service ${SERVICENAME} does not exist.">&2 ; showservices ; exit 1 ; fi
   
   # Set CONTAINERNAME
   retrieveCONTAINERNAME "$DIRSERVICE"
   
   # assumes docker image does not use entrypoint. Could instead override entrypoint maybe.
   docker run --rm -i -t --name="$DNAME" -h "${HOSTNAME}" \
               -v ${DIRSERVICE}:/dr ${CONTAINERNAME} /usr/local/bin/drdestroy ${SERVICENAME} ${CONTAINERNAME}
   if [ $? -ne 0 ]; then RVALD=1 ; echo "Failed to run drdestroy.">&2 ; fi  
   
   # if the install process created a destroy script then run it, e.g. to destroy volume containers.
   # todo: tidy up return/exit codes!         
   if [ -e "${DIRSERVICE}/bin/hostdestroy" ]; then
      bash "${DIRSERVICE}/bin/hostdestroy" "${SERVICENAME}" "${CONTAINERNAME}"
   else 
      RVALD=1
   fi      
   
   # clean up service directory.
   rm -r "${DIRSERVICE}"
   
   exit $RVALD
}

#------------------------------------------------------------------------------------

CMD="$1"
shift

case "$CMD" in
   configure)
      configure "$@"   # Expands to separate params even in quotes. http://www.gnu.org/software/bash/manual/bash.html#Special-Parameters
      ;;
      
   install)
      install "$@"
      ;;
      
   destroy)
      destroy "$@"
      ;;
      
   clean)
      # not including -v /etc:/etc since we aren't using exclude files.
      docker run --rm -v /var/run/docker.sock:/var/run/docker.sock spotify/docker-gc
      ;;

   "")
      showusage
      ;;
   
   *)
      # check if CMD matches a service. If so run the appropriate script.
      if [ -d $DRETCDIR ]; then
         retrieveDIRECTORY
         PDIR="${DIRECTORY}/${CMD}"
         if [ -d "${PDIR}" ]; then
            retrieveCONTAINERNAME "${PDIR}"
            SUBCMD="$1"
            shift
            FULLCMD="${PDIR}/bin/${SUBCMD}"
            if [ -n "$SUBCMD" ] && [ -e "${FULLCMD}" ]; then
               bash "${FULLCMD}" "${CMD}" "${CONTAINERNAME}" "$@"
               exit $?
            else
               if [ -e "${PDIR}/bin/help" ]; then
                  bash "${PDIR}/bin/help" "${CMD}" "${CONTAINERNAME}"
               else
                  echo "${CMD} does not provide any help."
               fi
               exit $?
            fi
         fi
      fi
            
      # otherwise show usage.
      showservices
      ;;
esac


