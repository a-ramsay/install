#!/bin/bash
set -o errexit
set -o nounset

#
# ██████╗ ██████╗ ██╗   ██╗███╗   ██╗███╗   ██╗███████╗██████╗       ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     
# ██╔══██╗██╔══██╗██║   ██║████╗  ██║████╗  ██║██╔════╝██╔══██╗      ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     
# ██║  ██║██████╔╝██║   ██║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝█████╗██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     
# ██║  ██║██╔══██╗██║   ██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗╚════╝██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     
# ██████╔╝██║  ██║╚██████╔╝██║ ╚████║██║ ╚████║███████╗██║  ██║      ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗
# ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝      ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝
#                                                                                                                          
#                                                                            
#
#  dRunner installer
#  Manage docker containers in a simple and consistent way.
#  
#  See:
#    https://github.com/j842/drunner
#
#------------------------------------------------------------------------------------

# Formatting for comamnds - standardised.
[ -v ECODE ] || readonly ECODE=$(printf "\e") 
[ -v CODE_S ] || readonly CODE_S="$ECODE[32m"
[ -v CODE_E ] || readonly CODE_E="$ECODE[0m"

# command_exists
function command_exists { command -v "$1" >/dev/null 2>&1 ; }

#------------------------------------------------------------------------------------

# die MESSAGE 
function die {
   if [ "$#" -eq 1 ]; then
      echo -e "$1" <&2
   else
      echo -e "Unexpected error. Exiting."<&2
   fi
   exit 1
}

#------------------------------------------------------------------------------------

# showusage
function showusage {
cat <<'EOF' >&2

NAME
   drunner-install - install the dRunner framework
    
SYNOPSIS
   drunner-install [ROOTPATH]

DESCRIPTION
   dRunner Provides a standard way to manage and run containers.
   This script installs dRunner on a Debian system, with all files
   stored under ROOTPATH, which defaults to /home/$USER/drunner.
      
   See https://github.com/j842/drunner
   
EXIT CODE
   0   - success
   1   - error
   3   - no changes made
   
EOF
}

#------------------------------------------------------------------------------------

# copydrfiles
function copydrfiles {
   [ ! -d "${ROOTPATH}/support" ]    || chmod -R 0777 "${ROOTPATH}/support" && rm -rf "${ROOTPATH}/support"    || die "Couldn't remove old ${ROOTPATH}/support."
   mkdir -p "${ROOTPATH}/support"    || die "Couldn't create ${ROOTPATH}/support"
   chmod 0777 "${ROOTPATH}/support"  || die "Couldn't set permissions on ${ROOTPATH}/support"
   [ -d "${ROOTPATH}/services" ]     || mkdir -p "${ROOTPATH}/services" || die "Couldn't create ${ROOTPATH}/services"

   # copy the support files from the install-support image onto the host.    
   docker run --rm -it -v "${ROOTPATH}/support:/tempcopy" "${SUPPORTIMAGE}" \
      /bin/bash -c "cp -r /support/* /tempcopy/"                             
   
   if [ $? -ne 0 ]; then 
      echo "Failed to copy files.">&2 
      echo "You will need to reinstall dRunner.">&2
      rm -rf "${ROOTPATH}"
      exit 1
   fi  
   
   # set ownership and permissions for those support files (don't rely on what's in the container).
   docker run --rm -v "${ROOTPATH}/support:/s" drunner/baseimage-alpine \
      bash -c "chown -R $EUID:${GROUPS[0]} /s ; chmod -R 0500 /s ; chmod -R 0555 /s/run_on_service"

   # set up the symbolic link so drunner is in the current users path.
   local E="${HOME}/bin"
   [ -d "$E" ] || { mkdir -p "$E" || die "Couldn't create $E" ; source ~/.profile ; }  
   local S="${ROOTPATH}/support"
   # broken symlinks will be false for -e but true for -L. 
   if [ -e "$E/drunner" ] || [ -L "$E/drunner" ]; then
      rm -f "$E/drunner" || die "Couldn't delete old $E/drunner"
   fi
   ln -s "$S/drunner" "$E/drunner"
}

#------------------------------------------------------------------------------------

# configure
function configure {   
   UPDATE=""
   if [ -e "${ROOTPATH}/support/buildtime.sh" ]; then
      source "${ROOTPATH}/support/buildtime.sh"
      UPDATE="${SUPPORTBUILDTIME}"
   fi
   
   local DATESTAMP="$(TZ=Pacific/Auckland date)"

   # ensure we have the latest support image.
   if [ "$PULLONUPDATE" -eq 1 ]; then
      docker pull "${SUPPORTIMAGE}"
      if [ "$?" -ne 0 ]; then die "Unable to pull required Docker image ${SUPPORTIMAGE}." ; fi
   fi

   
   # creates ROOTPATH and populates the bin folder from SUPPORTIMAGE.
   copydrfiles
   
   source "${ROOTPATH}/support/buildtime.sh" || die "Missing buildtime.sh!"

cat <<EOF >"${ROOTPATH}/config.sh"
# Docker Runner configuration file.
# You can edit this file - user changes are preserved on update.
# Last generated ${DATESTAMP}

ROOTPATH="${ROOTPATH}"
readonly SUPPORTIMAGE="${SUPPORTIMAGE}"
readonly PULLONUPDATE=${PULLONUPDATE}
readonly DRUNNERINSTALLURL="${DRUNNERINSTALLURL}"
readonly DRUNNERINSTALLTIME="${DATESTAMP}"
EOF
         
   if [ -n "$UPDATE" ]; then
      echo " ">&2
      echo "Updated with ${SUPPORTIMAGE}">&2
      echo " ">&2
      echo "Previous Support Build: ${UPDATE}">&2
      echo "New Support Build:      ${SUPPORTBUILDTIME}">&2
      echo " ">&2
      echo -e "Update complete. Try running ${CODE_S}drunner${CODE_E} now." >&2
      echo " ">&2      
   else
      echo " ">&2
      echo " ">&2
      echo -e "Installation complete! Try running ${CODE_S}drunner${CODE_E} now." >&2
      echo " ">&2
   fi
}

#------------------------------------------------------------------------------------

# MAIN

[ "$EUID" -ne 0 ] || die "Please install as a standard user, not as root!" 
groups $USER | grep &>/dev/null '\bdocker\b' || die "Please add the current user to the docker group. As root: ${CODE_S}adduser $USER docker${CODE_E}"
groups | grep &>/dev/null '\bdocker\b' || { GRP=$(id -g) ; newgrp docker ; newgrp "$GRP" ; }
groups | grep &>/dev/null '\bdocker\b' || die "$USER doesn't seem to be a member of docker. Log out then in again?"

if ! command_exists docker ; then
   echo "Please install Docker before using dRunner.">&2
   echo "(e.g. use  https://raw.githubusercontent.com/j842/scripts/master/install_docker.sh )">&2
   exit 1
fi
docker --version || die "Couldn't run docker --version for some reason?"

if [ "$(uname -rv | grep -c Debian)" -eq 0 ]; then
   die "This script is currently only for Debian hosts."
fi

if [ "$#" -gt 1 ]; then
   showusage
   exit 1  
fi

ROOTPATH="/home/${USER}/drunner"
PULLONUPDATE=1
SUPPORTIMAGE="drunner/install-support:latest"
DRUNNERINSTALLURL="https://raw.githubusercontent.com/drunner/install/master/drunner-install"

# if caller specified ROOTPATH then override with that.
[ $# -eq 0 ] || ROOTPATH="$1"

# preserve existing settings if present.
[ ! -e "$ROOTPATH/config.sh" ] || source "$ROOTPATH/config.sh"

# if caller specified ROOTPATH then override with that (again!) - handles edge case where config.sh has been manually moved.
[ $# -eq 0 ] || ROOTPATH="$1"

# ensure consistency in exact path string (we test this later in drunner)
ROOTPATH=$(realpath "$ROOTPATH" | tr -d '\r\n')

configure
