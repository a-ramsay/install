#!/bin/bash
set -o errexit
set -o nounset

#
# ██████╗ ██████╗ ██╗   ██╗███╗   ██╗███╗   ██╗███████╗██████╗       ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     
# ██╔══██╗██╔══██╗██║   ██║████╗  ██║████╗  ██║██╔════╝██╔══██╗      ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     
# ██║  ██║██████╔╝██║   ██║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝█████╗██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     
# ██║  ██║██╔══██╗██║   ██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗╚════╝██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     
# ██████╔╝██║  ██║╚██████╔╝██║ ╚████║██║ ╚████║███████╗██║  ██║      ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗
# ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝      ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝
#                                                                                                                          
#                                                                            
#
#  Docker Runner installer
#  Manage docker containers in a simple and consistent way.
#  
#  See:
#    https://github.com/j842/dr
#
# ------------------------------------------------------------------


# Global constants.
readonly DRETCPATH="/etc/dr"
readonly DR_CFG_FILE_PATH="${DRETCPATH}/dr.cfg"
readonly SUPPORTIMAGE="j842/dr-support"
readonly DRBINDIR="bin"
readonly DRSERVICESDIR="services"


#------------------------------------------------------------------------------------

# command_exists
function command_exists { command -v "$1" >/dev/null 2>&1 ; }

#------------------------------------------------------------------------------------

# die MESSAGE 
function die {
   if [ "$#" -eq 1 ]; then
      echo "$1" <&2
   else
      echo "Unexpected error. Exiting."<&2
   fi
   exit 1
}

#------------------------------------------------------------------------------------

# showusage
function showusage {
cat <<'EOF' >&2

NAME
   dr-install - install the Docker Runner framework
    
SYNOPSIS
   dr-install ROOTPATH

DESCRIPTION
   Docker Runner Provides a standard way to manage and run containers.
   This script installs Docker Runner on a Debian system, with all files
   stored under ROOTPATH, e.g. /opt/dr.
   
   See https://github.com/j842/dr
   
EXIT CODE
   0   - success
   1   - error
   3   - no changes made
   
EOF
}

#------------------------------------------------------------------------------------

# copydrfiles
function copydrfiles {
   # the ROOTPATH that the container will update.
   if [ -d "${DRBINPATH}" ]; then
      rm -r "${DRBINPATH}"
   fi
   mkdir -p "${DRBINPATH}"
   mkdir -p "${ROOTPATH}/${DRSERVICESDIR}"
   
   docker run --rm -it -v "${DRBINPATH}:/tempcopy" "${SUPPORTIMAGE}" /bin/bash -c "cp -r /dr/* /tempcopy/"                             
   if [ $? -ne 0 ]; then 
      echo "Failed to copy files.">&2 
      echo "You will need to reinstall Docker Runner.">&2
      rm -r "${ROOTPATH}" "${DRETCPATH}"
      exit 1
   fi  
   # set safer ownership and permissions
   chown -R root:root "${DRBINPATH}"
   chmod -R 0555 "${DRBINPATH}"

   local DREXEC="/usr/local/bin/dr"
   if [ -e "$DREXEC" ]; then rm "$DREXEC" ; fi
   ln -s "${DRBINPATH}/dr" "$DREXEC"
}

#------------------------------------------------------------------------------------

# configure
function configure {
   if [ -z "$1" ]; then die "dr-install requires ROOTPATH argument." ; fi
   ROOTPATH="$1"
   DRBINPATH="${ROOTPATH}/${DRBINDIR}"
   
   UPDATE=""
   if [ -e "${DRBINPATH}/buildtime" ]; then
      . "${DRBINPATH}/buildtime"
      UPDATE="${BUILDTIME}"
   fi
   
   mkdir -p "$DRETCPATH"   # ensure directrory exists.   
   local DATESTAMP="$(TZ=Pacific/Auckland date)"

   # ensure we have the latest support image.
   if [ "$PULLONUPDATE" -eq 1 ]; then
      docker pull "${SUPPORTIMAGE}"
      if [ "$?" -ne 0 ]; then die "Unable to pull required Docker image ${SUPPORTIMAGE}." ; fi
   fi

cat <<EOF >"${DR_CFG_FILE_PATH}"
# Docker Runner configuration file.
# Last modified ${DATESTAMP}

readonly ROOTPATH="${ROOTPATH}"
readonly DRSERVICESPATH="${ROOTPATH}/${DRSERVICESDIR}"
readonly SUPPORTIMAGE="${SUPPORTIMAGE}"
readonly DRBINPATH=${ROOTPATH}/${DRBINDIR}
readonly PULLONUPDATE=${PULLONUPDATE}
EOF
   
   # creates ROOTPATH and populates the bin folder from SUPPORTIMAGE.
   copydrfiles
   
   . "${DRBINPATH}/buildtime"
         
   if [ -n "$UPDATE" ]; then
      echo " ">&2
      echo "Previous Build: ${UPDATE}">&2
      echo "New Build:      ${BUILDTIME}">&2
      echo " ">&2
      echo "Update complete, Docker Runner is ready to use!">&2
      echo " ">&2      
   else
      echo " ">&2
      echo " ">&2
      echo "Installation complete, Docker Runner is ready to use!">&2
      echo "Try running  dr  now." >&2
      echo " ">&2
   fi
}

#------------------------------------------------------------------------------------

# MAIN

if [ "$EUID" -ne 0 ]; then echo "Please run as root" ; exit 1 ; fi

if ! command_exists docker ; then
   echo "Please install Docker before using Docker Runner.">&2
   echo "(e.g. use  https://github.com/j842/scripts/blob/master/install_docker.sh )">&2
   exit 1
fi
if [ "$(uname -rv | grep -c Debian)" -eq 0 ]; then
   die "This script is currently only for Debian hosts."
fi

if [ $# -ne 1 ] && [ $# -ne 2 ]; then
   showusage
   exit 1  
fi

PULLONUPDATE=1
if [ $# -eq 2 ]; then
  PULLONUPDATE="$2"
fi

configure "$1"
