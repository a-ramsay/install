#!/bin/bash
set -o errexit
set -o nounset

#
# ██████╗ ██████╗       ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     
# ██╔══██╗██╔══██╗      ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     
# ██║  ██║██████╔╝█████╗██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     
# ██║  ██║██╔══██╗╚════╝██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     
# ██████╔╝██║  ██║      ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗
# ╚═════╝ ╚═╝  ╚═╝      ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝
#                                                                            
#
#  Docker Runner installer
#  Manage docker containers in a simple and consistent way.
#  
#  See:
#    https://github.com/j842/dr
#
# ------------------------------------------------------------------


# Global constants.
readonly DRETCPATH="/etc/dr"
readonly DR_CFG_FILE_PATH="${DRETCPATH}/dr.cfg"
readonly SUPPORTIMAGE="j842/dr-support"
readonly DRBINDIR="bin"
readonly DRSERVICESDIR="services"


#------------------------------------------------------------------------------------

# command_exists
function command_exists { command -v "$1" >/dev/null 2>&1 ; }

#------------------------------------------------------------------------------------


# showusage
function showusage {
cat <<'EOF' >&2

NAME
   dr-install - install the Docker Runner framework
    
SYNOPSIS
   dr-install ROOTPATH

DESCRIPTION
   Docker Runner Provides a standard way to manage and run containers.
   This script installs Docker Runner on a Debian system, with all files
   stored under ROOTPATH, e.g. /opt/dr.
   
   See https://github.com/j842/dr
   
EXIT CODE
   0   - success
   1   - error
   3   - no changes made
   
EOF
}

#------------------------------------------------------------------------------------

# copydrfiles
function copydrfiles {
   # the ROOTPATH that the container will update.
   local DRBINPATH="${ROOTPATH}/${DRBINDIR}"
   if [ -d "${DRBINPATH}" ]; then
      rm -r "${DRBINPATH}"
   fi
   mkdir -p "${DRBINPATH}"
   mkdir -p "${ROOTPATH}/${DRSERVICESDIR}"
   
   # allow normal user in container to add content to DRBINPATH.
   chmod a+rwx "${DRBINPATH}"
   docker run --rm -it -v "${DRBINPATH}:/tempcopy" "${SUPPORTIMAGE}" /bin/bash -c "cp -r /dr/* /tempcopy/"                             
   if [ $? -ne 0 ]; then 
      echo "Failed to copy files.">&2 
      echo "You will need to reinstall Docker Runner.">&2
      rm -r "${ROOTPATH}" "${DRETCPATH}"
      exit 1
   fi  
   # set safer ownership and permissions
   chown -R root:root "${DRBINPATH}"
   chmod -R a-w "${DRBINPATH}"

   local DREXEC="/usr/local/bin/dr"
   if [ -e "$DREXEC" ]; then rm "$DREXEC" ; fi
   ln -s "${DRBINPATH}/dr" "$DREXEC"
}

#------------------------------------------------------------------------------------

# configure
function configure {
   if [ -z $1 ]; then echo "dr-install requires ROOTPATH argument.">&2 ; exit 1 ; fi
   ROOTPATH="$1"
   mkdir -p "$DRETCPATH"   # ensure directrory exists.   
   local DATESTAMP="$(LC_ALL=C date -u +"%a, %d %b %Y %X %z")"

   # ensure we have the latest support image.
   docker pull "${SUPPORTIMAGE}"
   if [ "$?" -ne 0 ]; then echo "Unable to pull required Docker image ${SUPPORTIMAGE}." ; exit 1 ; fi

cat <<EOF >"${DR_CFG_FILE_PATH}"
# Docker Runner configuration file.
# Last modified ${DATESTAMP}

readonly ROOTPATH="${ROOTPATH}"
readonly DRSERVICESPATH="${ROOTPATH}/${DRSERVICESDIR}"
readonly SUPPORTIMAGE="${SUPPORTIMAGE}"
readonly DRBINPATH=${ROOTPATH}/${DRBINDIR}
EOF
   
   # creates ROOTPATH and populates the bin folder from SUPPORTIMAGE.
   copydrfiles
   
   # set up standard docker user and group for containers.
   # groupadd -g 22022 "$DRGROUP"
   # adduser --disabled-password --gecos '' -u 22022 --gid 22022 "$DRUSER"
      
   echo "Configuration complete, Docker Runner is ready to use! Try running  dr  now." >&2
}

#------------------------------------------------------------------------------------


# MAIN

if [ "$EUID" -ne 0 ]; then echo "Please run as root" ; exit 1 ; fi

if ! command_exists docker ; then
   echo "Please install Docker before using Docker Runner.">&2
   echo "(e.g. use  https://github.com/j842/scripts/blob/master/install_docker.sh )">&2
   exit 1
fi
if [ "$(uname -rv | grep -c Debian)" -eq 0 ]; then
   echo "This script is currently only for Debian hosts.">&2
   exit 1
fi
# Check basic commands are available
COMMANDS=(gpg wget md5sum)
for NEEDEDCMD in "${COMMANDS[@]}"; do
  if ! command_exists "${NEEDEDCMD}" ; then 
      echo "Docker Runner requires ${NEEDEDCMD} to be available for scripts." >&2 
      exit 1 
  fi
done

if [ $# -eq 1 ]; then
   configure "$1"
else
   showusage
   exit 1
fi
   



